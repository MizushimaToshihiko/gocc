package test_literal

func assert(want int, act int, code string)
func println(format ...string)

#include "test.h"

func main() {
	ASSERT(97, 'a')
	ASSERT(10, '\n')

	ASSERT(511, 0o777)
	ASSERT(0, 0x0)
	ASSERT(10, 0xa)
	ASSERT(10, 0xA)
	ASSERT(48879, 0xbeef)
	ASSERT(48879, 0xBEEF)
	ASSERT(0, 0b0)
	ASSERT(1, 0b1)
	ASSERT(47, 0b101111)

	// '_' test
	ASSERT(384, 0_600)
	ASSERT(42, 4_2)
	ASSERT(195951310, 0x_BadFace)
	ASSERT(801915078, 0x_67_7a_2f_cc_40_c6)
	ASSERT(170141183460469, 170_141183_460469)
	ASSERT(1000, 1_0_0_0)

	ASSERT(4, Sizeof(0))
	ASSERT(4, Sizeof(2147483647))
	ASSERT(8, Sizeof(2147483648))

	// cannot tokenize for strconv.ParseInt function in tokenize.go
	ASSERT(-1, 0xffffffffffffffff)
	ASSERT(4, Sizeof(0xffffffffffffffff))
	ASSERT(-1, 0xffffffffffffffff>>63)
	ASSERT(-1, 18446744073709551615)
	ASSERT(4, Sizeof(18446744073709551615))
	ASSERT(-1, 18446744073709551615>>63)
	ASSERT(-1, 0xffffffffffffffff)
	ASSERT(4, Sizeof(0xffffffffffffffff))
	ASSERT(-1, 0xffffffffffffffff>>63)
	ASSERT(-1, 01777777777777777777777)
	ASSERT(4, Sizeof(01777777777777777777777))
	ASSERT(-1, 01777777777777777777777>>63)
	ASSERT(-1, 0b1111111111111111111111111111111111111111111111111111111111111111)
	ASSERT(4, Sizeof(0b1111111111111111111111111111111111111111111111111111111111111111))
	ASSERT(-1, 0b1111111111111111111111111111111111111111111111111111111111111111>>63)

	ASSERT(8, Sizeof(2147483648))
	ASSERT(4, Sizeof(2147483647))

	ASSERT(8, Sizeof(0x1ffffffff))
	ASSERT(4, Sizeof(0x7ffffffe))
	ASSERT(1, 0xffffffff>>31)

	ASSERT(8, Sizeof(040000000000))
	ASSERT(4, Sizeof(017777777775))
	ASSERT(1, 037777777777>>31)

	ASSERT(8, Sizeof(0b111111111111111111111111111111111))
	ASSERT(4, Sizeof(0b1111111111111111111111111111110))
	ASSERT(1, 0b11111111111111111111111111111111>>31)

	ASSERT(-1, 1<<31>>31)
	ASSERT(-1, 01<<31>>31)
	ASSERT(-1, 0x1<<31>>31)
	ASSERT(-1, 0b1<<31>>31)

	ASSERT(0, 0.0)
	ASSERT(1, 1.0)
	ASSERT(300000000, 3e+8)
	ASSERT(16, 0x10.1p0)
	ASSERT(1000, .1e4)

	ASSERT(16, 0x1_0.1p0)
	ASSERT(16, 0x_10.1p0)
	ASSERT(348, 0x15e-2)
	ASSERT(15, 0.15e+0_2)

	ASSERT(4, Sizeof(8))
	ASSERT(8, Sizeof(0.3))
	ASSERT(8, Sizeof(0.))
	ASSERT(8, Sizeof(.0))
	ASSERT(8, Sizeof(5.))
	ASSERT(8, Sizeof(2.0))

	// ASSERT(8, Sizeof("あいうえお"))

	println("OK")
}
