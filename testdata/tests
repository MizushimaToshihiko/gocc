var g1 int
var g2 [4]int

func assert(want int, ac int, code *byte) int {
	if want == ac {
		printf("%s => %d\n", code, ac)
	} else {
		printf("%s => %d expeted but got %d\n", code, want, ac)
		exit(1)
	}
}

func ret3() int {
	return 3
	return 5
}

func add2(x int, y int) int {
	return x + y
}

func sub2(x int, y int) int {
	return x - y
}

func add6(a int, b int, c int, d int, e int, f int) int {
	return a + b + c + d + e + f
}

func addx(x *int, y int) int {
	return *x + y
}

func subChar(a byte, b byte, c byte) int {
	return a - b - c
}

func fib(x int) int {
	if x <= 1 {
		return 1
	}
	return fib(x-1) + fib(x-2)
}

func main() {
	assert(0, 0, "0")
	assert(42, 42, "42")
	assert(5, 5, "5")
	assert(41, 12+34-5, "12 + 34 - 5")
	assert(15, 5*(9-6), "5*(9-6)")
	assert(4, (3+5)/2, "(3+5)/2")
	assert(-10, -10, "-10")
	assert(10, - -10, "- -10")
	assert(10, - -+10, "- - +10")

	assert(8, add2(3, 5), "add(3, 5)")
	assert(2, sub2(5, 3), "sub(5, 3)")
	assert(21, add6(1, 2, 3, 4, 5, 6), "add6(1, 2, 3, 4, 5, 6)")
	assert(55, fib(9), "fib(9)")

	assert(0, g1, "g1")
	g1 = 3
	assert(3, g1, "g1")

	g2[0] = 0
	g2[1] = 1
	g2[2] = 2
	g2[3] = 3
	assert(0, g2[0], "g2[0]")
	assert(1, g2[1], "g2[1]")
	assert(2, g2[2], "g2[2]")
	assert(3, g2[3], "g2[3]")

  assert(1, subChar(7, 3, 3), "subChar(7, 3, 3)");

  assert(97, "abc"[0], "\"abc\"[0]");
  assert(98, "abc"[1], "\"abc\"[1]");
  assert(99, "abc"[2], "\"abc\"[2]");
  assert(0, "abc"[3], "\"abc\"[3]");
  // assert(4, sizeof("abc"), "sizeof(\"abc\")");

  assert(7, "\a"[0], "\"\\a\"[0]");
  assert(8, "\b"[0], "\"\\b\"[0]");
  assert(9, "\t"[0], "\"\\t\"[0]");
  assert(10, "\n"[0], "\"\\n\"[0]");
  assert(11, "\v"[0], "\"\\v\"[0]");
  assert(12, "\f"[0], "\"\\f\"[0]");
  assert(13, "\r"[0], "\"\\r\"[0]");
  assert(27, "\e"[0], "\"\\e\"[0]");
  assert(0, "\0"[0], "\"\\0\"[0]");

  assert(106, "\j"[0], "\"\\j\"[0]");
  assert(107, "\k"[0], "\"\\k\"[0]");
  assert(108, "\l"[0], "\"\\l\"[0]");

  printf("OK\n")
	return 0
}
