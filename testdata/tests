var g1 int
var g2 [4]int

func assert(want int, ac int, code *byte) int {
	if want == ac {
		printf("%s => %d\n", code, ac)
	} else {
		printf("%s => %d expeted but got %d\n", code, want, ac)
		exit(1)
	}
}

func ret3() int {
	return 3
	return 5
}

func add2(x int, y int) int {
	return x + y
}

func sub2(x int, y int) int {
	return x - y
}

func add6(a int, b int, c int, d int, e int, f int) int {
	return a + b + c + d + e + f
}

func addx(x *int, y int) int {
	return *x + y
}

func subChar(a byte, b byte, c byte) int {
	return a - b - c
}

func f31() int {
	var a int=3
	return a
}

func f32() int {
	var a int=3
	var z int=5
	return a+z
}

func f33() int {
	var foo int=3
	return foo
}

func f34() int {
	var foo123 int=3
	var bar int=5
	return foo123+bar
}

func f35() int {
	if 0 {
		return 2
	}
	return 3
}

func f36() int {
	if 1-1{
		return 2
	}
	return 3
}

func f37() int {
	if 2-1{
		return 2
	}
	return 3
}

func f40() int {
	var i int=0
	for i<10 {
		i=i+1
	}
	return i
}

func f41() int {
	var i int=0
	for {
		i=i+1
		if i>5 {
			return i
		}
	}
	return 0
}

func f42() int {
	var i int=0
	var j int=0
	for i=0; i<=10; i=i+1 {
		j=i+j
	}
	return j
}

func f43() int {
	for ;; {
		return 3
		return 5
	}
}

func f52() int {
	var x int=3
	return *&x
}

func f53() int {
	var x int=3
	var y *int=&x
	var z **int=&y
	return **z
}

func f54() int {
	var x int=3
	var y int=5
	return *(&x+1)
}

func f55() int {
	var x int=3
	var y int=5
	return *(&y-1)
}

func f56() int {
	var x int=3
	var y *int=&x
	*y=5
	return x
}

func f57() int {
	var x int=3
	var y int=5
	*(&x+1)=7
	return y
}

func f58() int {
	var x int=3
	var y int=5
	*(&y-1)=7
	return x
}

func f59() int {
	var x [2]int
	var y *int=&x
	*y=3
	return *x
}

func f60() int {
	var x [3]int
	*x=3
	*(x+1)=4
	*(x+2)=5
	return *x
}

func f61() int {
	var x [3]int
	*x=3
	*(x+1)=4
	*(x+2)=5
	return *(x+1)
}

func f62() int {
	var x [3]int
	*x=3
	*(x+1)=4
	*(x+2)=5
	return *(x+1)
}

func f63() int {
	var x [3]int
	*x=3
	*(x+1)=4
	*(x+2)=5
	return *(x+2)
}

func f64() int {
	var x [2][3]int
	var y *int=x
	*y=0
	return **x
}

func f65() int {
	var x [2][3]int
	var y *int=x
	*(y+1)=1
	return *(*x+1)
}

func f66() int {
	var x [2][3]int
	var y *int=x
	*(y+2)=2
	return *(*x+2)
}

func f67() int {
	var x [2][3]int
	var y *int=x
	*(y+3)=3
	return **(x+1)
}

func f68() int {
	var x [2][3]int
	var y *int=x
	*(y+4)=4
	return *(*(x+1)+1)
}

func f69() int {
	var x [2][3]int
	var y *int=x
	*(y+5)=5
	return *(*(x+1)+2)
}

func f70() int {
	var x [2][3]int
	var y *int=x
	*(y+6)=6
	return **(x+2)
}

func f71() int {
	var x [3]int
	*x=3
	x[1]=4
	x[2]=5
	return *x
}

func f72() int {
	var x [3]int
	*x=3
	x[1]=4
	x[2]=5
	return *(x+1)
}

func f73() int {
	var x [3]int
	*x=3
	x[1]=4
	x[2]=5
	return *(x+2)
}

func f74() int {
	var x [3]int
	*x=3
	x[1]=4
	x[2]=5
	return *(x+2)
}

func f75() int {
	var x [3]int
	*x=3
	x[1]=4
	2[x]=5
	return *(x+2)
}

func f76() int {
	var x [2][3]int
	var y *int=x
	y[0]=0
	return x[0][0]
}

func f77() int {
	var x [2][3]int
	var y *int=x
	y[1]=1
	return x[0][1]
}

func f78() int {
	var x [2][3]int
	var y *int=x
	y[2]=2
	return x[0][2]
}

func f79() int {
	var x [2][3]int
	var y *int=x
	y[3]=3
	return x[1][0]
}

func f80() int {
	var x [2][3]int
	var y *int=x
	y[4]=4
	return x[1][1]
}

func f81() int {
	var x [2][3]int
	var y *int=x
	y[5]=5
	return x[1][2]
}

func f82() int {
	var x [2][3]int
	var y *int=x
	y[6]=6
	return x[2][0]
}

func f90() int {
	var x byte=1
	var y byte=2
	return x
}

func f91() int {
	var x byte=1
	var y byte=2
	return y
}

func f97() int {
	/*return 1 */
	return 2
}

func f98() int {
	// return 1
	return 2
}

func f99() int {
	var x int=2
	{
		var x int=3
	}
	return x
}

func f100() int {
	var x int=2
	{
		var x int=3
	}
	{
		var y int=4
		return x
	}
}

func f101() int {
	var x int=2
	{
		x=3
	}
	return x
}

f102() int {
	type x struct {
		int a
		int b
	}
	x.a=1
	x.b=2
	return x.a
}

func main() {
	assert(0, 0, "0")
	// assert(42, 42, "42")
	// assert(5, 5, "5")
	// assert(41, 12+34-5, "12 + 34 - 5")
	// assert(15, 5*(9-6), "5*(9-6)")
	// assert(4, (3+5)/2, "(3+5)/2")
	// assert(-10, -10, "-10")
	// assert(10, - -10, "- -10")
	// assert(10, - -+10, "- - +10")

	// assert(0, 0==1, "0==1")
	// assert(1, 42==42, "42==42")
	// assert(1, 0!=1, "0!=1")
	// assert(0, 42!=42, "42!=42")

	// assert(1, 0<1, "0<1")
	// assert(0, 1<1, "1<1")
	// assert(0, 2<1, "2<1")
	// assert(1, 0<=1, "0<=1")
	// assert(1, 1<=1, "1<=1")
	// assert(0, 2<=1, "2<=1")

	// assert(1, 1>0, "1>0")
	// assert(0, 1>1, "1>1")
	// assert(0, 1>2, "1>2")
	// assert(1, 1>=0, "1>=0")
	// assert(1, 1>=1, "1>=1")
	// assert(0, 1>=2, "1>=2")

	// assert(3, ret3(), "ret3()")

	// assert(8, add2(3, 5), "add(3, 5)")
	// assert(2, sub2(5, 3), "sub(5, 3)")
	// assert(21, add6(1, 2, 3, 4, 5, 6), "add6(1, 2, 3, 4, 5, 6)")
	// assert(55, fib(9), "fib(9)")

	// assert(0, g1, "g1")
	// g1 = 3
	// assert(3, g1, "g1")

	// g2[0] = 0
	// g2[1] = 1
	// g2[2] = 2
	// g2[3] = 3
	// assert(0, g2[0], "g2[0]")
	// assert(1, g2[1], "g2[1]")
	// assert(2, g2[2], "g2[2]")
	// assert(3, g2[3], "g2[3]")

	// assert(1, subChar(7, 3, 3), "subChar(7, 3, 3)")

	// assert(97, "abc"[0], "\"abc\"[0]")
	// assert(98, "abc"[1], "\"abc\"[1]")
	// assert(99, "abc"[2], "\"abc\"[2]")
	// assert(0, "abc"[3], "\"abc\"[3]")

	// assert(7, "\a"[0], "\"\\a\"[0]")
	// assert(8, "\b"[0], "\"\\b\"[0]")
	// assert(9, "\t"[0], "\"\\t\"[0]")
	// assert(10, "\n"[0], "\"\\n\"[0]")
	// assert(11, "\v"[0], "\"\\v\"[0]")
	// assert(12, "\f"[0], "\"\\f\"[0]")
	// assert(13, "\r"[0], "\"\\r\"[0]")
	// assert(27, "\e"[0], "\"\\e\"[0]")
	// assert(0, "\0"[0], "\"\\0\"[0]")

	// assert(106, "\j"[0], "\"\\j\"[0]")
	// assert(107, "\k"[0], "\"\\k\"[0]")
	// assert(108, "\l"[0], "\"\\l\"[0]")

	// assert(3, f31(), "func f31() int {\n\tvar a int=3\n\treturn a\n}")
	// assert(8, f32(), "func f32() int {\n\tvar a int=3\n\tvar z int=5\n\treturn a+z\n}")
	// assert(3, f33(), "func f33() int {\n\tvar foo int=3\n\treturn foo\n}")
	// assert(8, f34(), "func f34() int {\n\tvar foo123 int=3\n\tvar bar int=5\n\treturn foo123+bar\n}")

	// assert(3, f35(), "func f35() int {\n\tif 0 {\n\t\treturn 2\n\t}\n\treturn 3\n}")
	// assert(3, f36(), "func f36() int {\n\tif 1-1{\n\t\treturn 2\n\t}\n\treturn 3\n}")
	// assert(2, f37(), "func f37() int {\n\tif 2-1{\n\t\treturn 2\n\t}\n\treturn 3\n}")

	// assert(10, f40(), "func f40() int {\n\tvar i int=0\n\tfor i<10 {\n\t\ti=i+1\n\t}\n\treturn i\n}")
	// assert(6, f41(), "func f41() int {\n\tvar i int=0\n\tfor {\n\t\ti=i+1\n\t\tif i>5 {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn 0\n}")
	// assert(55, f42(), "func f42() int {\n\tvar i int=0\n\tvar j int=0\n\tfor i=0; i<=10; i=i+1 {\n\t\tj=i+j\n\t}\n\treturn j\n}")
	// assert(3, f43(), "func f43() int {\nfor ;; {\n\treturn 3\n\treturn 5\n}\n}")

	// assert(3, f52(), "func f52() int {\n\tvar x int=3\n\treturn *&x\n}")
	// assert(3, f53(), "func f53() int {\n\tvar x int=3\n\tvar y *int=&x\n\tvar z **int=&y\n\treturn **z\n}")
	// assert(5, f54(), "func f54() int {\n\tvar x int=3\n\tvar y int=5\n\treturn *(&x+1)\n}")
	// assert(3, f55(), "func f55() int {\n\tvar x int=3\n\tvar y int=5\n\treturn *(&y-1)\n}")
	// assert(5, f56(), "func f56() int {\n\tvar x int=3\n\tvar y *int=&x\n\t*y=5\n\treturn x\n}")
	// assert(7, f57(), "func f57() int {\n\tvar x int=3\n\tvar y int=5\n\t*(&x+1)=7\n\treturn y\n}")
	// assert(7, f58(), "func f58() int {\n\tvar x int=3\n\tvar y int=5\n\t*(&y-1)=7\n\treturn x\n}")
	// assert(3, f59(), "func f59() int {\n\tvar x [2]int\n\tvar y *int=&x\n\t*y=3\n\treturn *x\n}")

	// assert(3, f60(), "func f60() int {\n\tvar x [3]int\n\t*x=3\n\t*(x+1)=4\n\t*(x+2)=5\n\treturn *x\n}")
	// assert(4, f61(), "func f61() int {\n\tvar x [3]int\n\t*x=3\n\t*(x+1)=4\n\t*(x+2)=5\n\treturn *(x+1)\n}")
	// assert(5, f63(), "func f63() int {\n\tvar x [3]int\n\t*x=3\n\t*(x+1)=4\n\t*(x+2)=5\n\treturn *(x+2)\n}")

	// assert(0, f64(), "func f64() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\t*y=0\n\treturn **x\n}")
	// assert(1, f65(), "func f65() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\t*(y+1)=1\n\treturn *(*x+1)\n}")
	// assert(2, f66(), "func f66() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\t*(y+2)=2\n\treturn *(*x+2)\n}")
	// assert(3, f67(), "func f67() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\t*(y+3)=3\n\treturn **(x+1)\n}")
	// assert(4, f68(), "func f68() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\t*(y+4)=4\n\treturn *(*(x+1)+1)\n}")
	// assert(5, f69(), "func f69() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\t*(y+5)=5\n\treturn *(*(x+1)+2)\n}")
	// assert(6, f70(), "func f70() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\t*(y+6)=6\n\treturn **(x+2)\n}")

	// assert(3, f71(), "func f71() int {\n\tvar x [3]int\n\t*x=3\n\tx[1]=4\n\tx[2]=5\n\treturn *x\n}")
	// assert(4, f72(), "func f72() int {\n\tvar x [3]int\n\t*x=3\n\tx[1]=4\n\tx[2]=5\n\treturn *(x+1)\n}")
	// assert(5, f73(), "func f73() int {\n\tvar x [3]int\n\t*x=3\n\tx[1]=4\n\tx[2]=5\n\treturn *(x+2)\n}")
	// assert(5, f74(), "func f74() int {\n\tvar x [3]int\n\t*x=3\n\tx[1]=4\n\tx[2]=5\n\treturn *(x+2)\n}")
	// assert(5, f75(), "func f75() int {\n\tvar x [3]int\n\t*x=3\n\tx[1]=4\n\t2[x]=5\n\treturn *(x+2)\n}")

	// assert(0, f76(), "func f76() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\ty[0]=0\n\treturn x[0][0]\n}")
	// assert(1, f77(), "func f77() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\ty[1]=1\n\treturn x[0][1]\n}")
	// assert(2, f78(), "func f78() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\ty[2]=2\n\treturn x[0][2]\n}")
	// assert(3, f79(), "func f79() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\ty[3]=3\n\treturn x[1][0]\n}")
	// assert(4, f80(), "func f80() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\ty[4]=4\n\treturn x[1][1]\n}")
	// assert(5, f81(), "func f81() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\ty[5]=5\n\treturn x[1][2]\n}")
	// assert(6, f82(), "func f82() int {\n\tvar x [2][3]int\n\tvar y *int=x\n\ty[6]=6\n\treturn x[2][0]\n}")

	// assert(1, f90(), "func f90() int {\n\tvar x byte=1\n\tvar y byte=2\n\treturn x\n}")
	// assert(2, f91(), "func f91() int {\n\tvar x byte=1\n\tvar y byte=2\n\treturn y\n}")

	// assert(2, f97(), "func f97() int {\n\t/*return 1 */\n\treturn 2\n}")
	// assert(2, f98(), "func f98() int {\n\t// return 1\nreturn 2\n}")

	// assert(2, f99(), "func f99() int {\n\tvar x int=2\n\t{\n\t\tvar x int=3\n\t}\n\treturn x\n}")
	// assert(2, f100(), "func f100() int {\n\tvar x int=2\n\t{\n\t\tvar x int=3\n\t}\n\t{\n\t\tvar y int=4\n\t\treturn x\n\t}\n}")
	// assert(3, f101(), "func f101() int {\n\tvar x int=2\n\t{\n\t\tx=3\n\t}\n\treturn x\n}")
	
	// assert(1, f102(), "type x struct {\n\tint a\n\tint b\n}\nf102() int {\n\tx.a=1\n\tx.b=2\n\treturn x.a\n}")

	printf("OK\n")
	return 0
}


func fib(x int) int {
	if x <= 1 {
		return 1
	}
	return fib(x-1) + fib(x-2)
}
